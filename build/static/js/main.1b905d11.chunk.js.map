{"version":3,"sources":["App.js","index.js"],"names":["randomMathQuestion","require","App","useState","currentAccount","setCurrentAccount","allMaths","setAllMaths","mathQuestion","setMathQuestion","mathAnswer","setMathAnswer","questionAnswer","setQuestionAnswer","contractAddress","contractABI","abi","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","getAllMaths","connectWallet","alert","math","toString","provider","ethers","providers","Web3Provider","signer","getSigner","mathPortalContract","Contract","qna","getTotalMath","count","toNumber","gasLimit","mathTxn","hash","wait","maths","mathsCleaned","map","address","accId","timestamp","Date","message","getQuestionAndAnswer","get","question","answer","useEffect","onNewMath","from","prevState","on","off","className","name","placeholder","type","id","value","onChange","e","target","onClick","index","key","style","backgroundColor","marginTop","padding","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1b905d11.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { ethers } from \"ethers\"; //ethers is a library that helps our frontend talk to our contract\r\nimport abi from \"./utils/MathPortal.json\";\r\nvar randomMathQuestion = require('random-math-question');\r\n\r\nconst App = () => {\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n  /*\r\n   * All state property to store all Maths\r\n   */\r\n  const [allMaths, setAllMaths] = useState([]);\r\n  const [mathQuestion, setMathQuestion] = useState(\"\");\r\n  const [mathAnswer, setMathAnswer] = useState(\"\");\r\n  const [questionAnswer, setQuestionAnswer] = useState(\"\")\r\n  //So, contract address you have -- right? Remember when you deployed your contract and I told you to save the address? This is what it's asking for!\r\n  const contractAddress = \"0xc0389B98C397daD8C04d9E9039C289D5928e8DeE\";\r\n  //what's an ABI? Much earlier I mentioned how when you compile a contract, it creates a bunch of files for you under artifacts. An ABI is one of those files.\r\n  const contractABI = abi.abi;\r\n\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        console.log(\"Make sure you have metamask!\");\r\n        return;\r\n      } else {\r\n        console.log(\"We have the ethereum object\", ethereum);\r\n      }\r\n\r\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\r\n\r\n      if (accounts.length !== 0) {\r\n        const account = accounts[0];\r\n        console.log(\"Found an authorized account:\", account);\r\n        setCurrentAccount(account);\r\n        getAllMaths();\r\n      } else {\r\n        console.log(\"No authorized account found\")\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Implement your connectWallet method here\r\n  */\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n\r\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\r\n\r\n      console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n  const math = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (ethereum) {\r\n        //A \"Provider\" is what we use to actually talk to Ethereum nodes. \r\n        //Remember how we were using Alchemy to deploy? Well in this case we use nodes that Metamask provides in the background to send/receive data from our deployed contract.\r\n        if (mathAnswer.toString() === questionAnswer) {\r\n          const provider = new ethers.providers.Web3Provider(ethereum);\r\n          const signer = provider.getSigner();\r\n          const mathPortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n          const maths = await mathPortalContract.getAllMaths();\r\n\r\n          let qna = \"The Question is \" + mathQuestion + \" = \" + mathAnswer + \".\";\r\n\r\n          /*\r\n          * You're using contractABI here\r\n          */\r\n          let count = await mathPortalContract.getTotalMath();\r\n          console.log(\"Retrieved total math count...\", count.toNumber());\r\n\r\n          const mathTxn = await mathPortalContract.math(qna, { gasLimit: 300000 });\r\n          console.log(\"Mining...\", mathTxn.hash);\r\n\r\n          await mathTxn.wait();\r\n          console.log(\"Mined -- \", mathTxn.hash);\r\n\r\n          count = await mathPortalContract.getTotalMath();\r\n          console.log(\"Retrieved total maths count...\", count.toNumber());\r\n\r\n          getAllMaths();\r\n        }\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  const getAllMaths = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const mathPortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n\r\n        /*\r\n         * Call the getAllMaths method from your Smart Contract\r\n         */\r\n        const maths = await mathPortalContract.getAllMaths();\r\n\r\n\r\n        /*\r\n         * We only need address, timestamp, and message in our UI so let's\r\n         * pick those out\r\n         */\r\n        const mathsCleaned = maths.map(math => {\r\n          return {\r\n            address: math.accId,\r\n            timestamp: new Date(math.timestamp * 1000),\r\n            message: math.message,\r\n          };\r\n        });\r\n\r\n        /*\r\n         * Store our data in React State\r\n         */\r\n        setAllMaths(mathsCleaned);\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\")\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  const getQuestionAndAnswer = async () => {\r\n    var mathQuestion = randomMathQuestion.get();\r\n    console.log(\"Question 1: \" + mathQuestion.question);\r\n    console.log(\"Answer: \" + mathQuestion.answer);\r\n    setMathQuestion(mathQuestion.question);\r\n    setMathAnswer(mathQuestion.answer);\r\n  }\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n    getQuestionAndAnswer();\r\n\r\n    let mathPortalContract;\r\n\r\n    const onNewMath = (from, timestamp, message) => {\r\n      console.log(\"NewMath\", from, timestamp, message);\r\n      setAllMaths(prevState => [\r\n        ...prevState,\r\n        {\r\n          address: from,\r\n          timestamp: new Date(timestamp * 1000),\r\n          message: message,\r\n        },\r\n      ]);\r\n    };\r\n\r\n    if (window.ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      const signer = provider.getSigner();\r\n\r\n      mathPortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n      mathPortalContract.on(\"NewMath\", onNewMath);\r\n    }\r\n\r\n    return () => {\r\n      if (mathPortalContract) {\r\n        mathPortalContract.off(\"NewMath\", onNewMath);\r\n      }\r\n    };\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"mainContainer\">\r\n      <div className=\"dataContainer\">\r\n        <div className=\"header\">\r\n          👋 Hey there!\r\n        </div>\r\n\r\n        <div className=\"bio\">\r\n          I am steven and I worked on self-improvement so that's pretty cool right? Connect your Ethereum wallet and do a math question!\r\n        </div>\r\n\r\n        <div className=\"bio\">\r\n          {mathQuestion}\r\n        </div>\r\n\r\n        {\r\n          currentAccount ? (<input name=\"mathArea\"\r\n            className=\"mathButton\"\r\n            placeholder=\"What the answer? Check the console for answer.\"\r\n            type=\"text\"\r\n            id=\"mathAnswer\"\r\n            value={questionAnswer}\r\n            onChange={e => setQuestionAnswer(e.target.value)} />) : null\r\n        }\r\n\r\n        <button className=\"mathButton\" onClick={math}>\r\n          Math Click\r\n        </button>\r\n\r\n        {/*\r\n        * If there is no currentAccount render this button\r\n        */}\r\n        {!currentAccount && (\r\n          <button className=\"mathButton\" onClick={connectWallet}>\r\n            Connect Wallet\r\n          </button>\r\n        )}\r\n\r\n        {allMaths.map((math, index) => {\r\n          return (\r\n            <div key={index} style={{ backgroundColor: \"OldLace\", marginTop: \"16px\", padding: \"8px\" }}>\r\n              <div>Address: {math.address}</div>\r\n              <div>Time: {math.timestamp.toString()}</div>\r\n              <div>Message: {math.message}</div>\r\n            </div>)\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}